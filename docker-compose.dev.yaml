version: "3.7"
services:
    server:
        image: docker.pkg.github.com/kind84/gospiga/server-dev
        depends_on:
            - traefik
            - alpha
            - zero
            - redis
        ports:
            - "8080:443"
        environment:
            - DATO_TOKEN
            - PORT=443
            - REDIS_HOST=redis:6379
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.server.entrypoints=websecure"
            - "traefik.http.routers.server.rule=Host(`kind84.duckdns.org`) && PathPrefix(`/server`)"
            - "traefik.http.routers.server.tls=true"
            - "traefik.http.routers.server.tls.certresolver=myresolver"
    finder:
        image: docker.pkg.github.com/kind84/gospiga/finder-dev
        depends_on:
            - traefik
            - redis
            - server
        ports:
            - "8070:443"
            - "50051:50051"
        environment:
            PORT: 443
            TCP_PORT: 50051
            REDIS_HOST: redis:6379
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.finder.entrypoints=websecure"
            - "traefik.http.routers.finder.rule=Host(`kind84.duckdns.org`) && PathPrefix(`/finder`)"
            - "traefik.http.routers.finder.tls=true"
            - "traefik.http.routers.finder.tls.certresolver=myresolver"
    # translator:
    #    build:
    #        context: ./translator
    #        dockerfile: Dockerfile
    #    depends_on:
    #        - redis
    #    ports:
    #        - "8090:8090"
    #    environment:
    #        GOSPIGA_REDIS_HOST: redis:6379
    #    volumes:
    #        - ./translator/gcloud-key.json:/gcloud-key.json
    traefik:
        image: traefik:v2.2
        # Enables the web UI and tells Traefik to listen to docker
        command:
           #- "--log.level=DEBUG" # (Default: ERROR) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.storage=acme.json"
            - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=duckdns"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=0"
            - "--certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # LetsEncrypt Staging Server - uncomment when testing
        environment:
            - DUCKDNS_TOKEN=$DUCKDNS_TOKEN
        ports:
            - "80:80"
            - "443:443"
            # The Web UI (enabled by --api.insecure=true)
            - "8088:8080"
        labels:
            # HTTP-to-HTTPS Redirect
            - "traefik.http.routers.http-catchall.entrypoints=http"
            - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
            - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
            - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock
            - /home/ubuntu/.traefik/acme/acme.json:/acme.json
    redis:
        image: docker.pkg.github.com/kind84/gospiga/redis-dev
        depends_on:
            - traefik
        ports:
            - "6379:6379"
        volumes:
            - type: volume
              source: redis
              target: /data
              volume:
                  nocopy: true
        command: ["redis-server", "--loadmodule", "/usr/lib/redis/modules/redisearch.so", "--appendonly", "yes", "--aof-use-rdb-preamble", "yes"]
        labels:
            - "traefik.enable=false"
    zero:
        image: docker.pkg.github.com/kind84/gospiga/dgraph-dev:v20.03.3
        depends_on:
            - traefik
        volumes:
            - type: volume
              source: dgraph
              target: /dgraph
              volume:
                  nocopy: true
        ports:
            - 5080:5080
            - 6080:6080
            - 8060:8080
            - 9060:9080
        restart: on-failure
        command: dgraph zero --my=zero:5080
        labels:
            - "traefik.enable=false"
    alpha:
        image: docker.pkg.github.com/kind84/gospiga/dgraph-dev:v20.03.3
        depends_on:
            - traefik
        volumes:
            - type: volume
              source: dgraph
              target: /dgraph
              volume:
                nocopy: true
        ports:
            - 8090:8080
            - 9080:9080
        restart: on-failure
        command: dgraph alpha --my=alpha:7080 --lru_mb=2048 --zero=zero:5080 --badger.vlog=disk
        labels:
            - "traefik.enable=false"
    ratel:
        image: docker.pkg.github.com/kind84/gospiga/dgraph-dev:v20.03.3
        depends_on:
            - traefik
        volumes:
            - type: volume
              source: dgraph
              target: /dgraph
              volume:
                  nocopy: true
        ports:
            - 8000:80
        command: dgraph-ratel -port 80
        labels:
            - "traefik.enable=false"
            #- "traefik.enable=true"
            #- "traefik.http.routers.ratel.rule=Host(`kind84.duckdns.org`) && PathPrefix(`/ratel`)"
            #- "traefik.http.routers.ratel.entrypoints=websecure"
            #- "traefik.http.routers.ratel.tls=true"
            #- "traefik.http.routers.ratel.tls.certresolver=myresolver"
            #- "traefik.http.routers.ratel.middlewares=stripprefix-ratel"
            #- "traefik.http.middlewares.stripprefix-ratel.stripprefix.prefixes=/ratel/,/ratel"
            #- "traefik.http.services.ratel-gospiga.loadbalancer.server.port=80"

volumes:
    dgraph:
        driver: local
        driver_opts:
            type: none
            device: /mnt/ext/dgraph
            o: bind
    redis:
        driver: local
        driver_opts:
            type: none
            device: /mnt/ext/redis
            o: bind
