type Recipe {
    uid: ID!
    title: String!
    subtitle: String!
    mainImage : Image!
    likes: Int!
    difficulty: String!
    cost: String!
    prepTime: Int!
    cookTime: Int
    servings: Int!
    extraNotes: String
    description: String
    ingredients: [Ingredient!]!
    steps: [Step!]!
    conclusion: String
    finalImage: Image
    # tag: [Tag!]!
    createdAt: Time!
    modifiedAt: Time!
}
 type Image {
   url String!
 }

type Ingredient {
    uid: ID!
    name: String!
    quantity: String
    unitOfMeasure: String
    recipe: [Recipe]!
}

type Step {
    uid: ID!
    index: Int!
    title: String!
    description: String!
    image: Image
}

# type Tag {
#     uid: ID!
#     name: String!
# }

# input NewRecipe {
#     title: String!
#     subtitle: String!
#     description: String
#     ingredient: [UpIngredient!]!
#     step: [UpStep!]!
#     conclusion: String
#     tag: [UpTag!]!
# }
#
# input UpRecipe {
#     uid: ID
#     title: String!
#     subtitle: String!
#     description: String
#     ingredient: [UpIngredient!]!
#     step: [UpStep!]!
#     conclusion: String
#     tag: [UpTag!]!
# }
#
# input UpIngredient {
#     uid: ID
#     name: String!
#     quantity: Int
# }
#
# input UpStep {
#     uid: ID
#     index: Int!
#     excerpt: String!
#     text: String!
# }
#
# input UpTag {
#     uid: ID
#     name: String!
# }

type Query {
    recipes(uid: ID, tags: [String]): [Recipe!]!
    ingredients(uid: ID, name: String): [Ingredient!]!
}

# type Mutation {
#     createRecipe(input: NewRecipe!): Recipe!
#     updateRecipe(input: UpRecipe!): Recipe!
# }

scalar Time
